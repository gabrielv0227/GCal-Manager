
# Option Select
 -- Create Event
 -- Edit Event
 -- Delete Event

 -- Query Eventpip install google-auth google-auth-oauthlib





# Google OAuth Example (Calendar-ID)

from google.oauth2 import service_account
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
import datetime
import pickle
import os.path

# If modifying these scopes, delete the file token.pickle
SCOPES = ['https://www.googleapis.com/auth/calendar']

def main():
    creds = None
    # The file token.pickle stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)
    
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        
        # Save the credentials for the next run
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)
    
    # Build the service object
    service = build('calendar', 'v3', credentials=creds)
    
    # Call the Calendar API
    calendars_result = service.calendarList().list().execute()
    calendars = calendars_result.get('items', [])
    
    # Print list of calendars
    if not calendars:
        print('No calendars found.')
    else:
        print('Calendars:')
        for calendar in calendars:
            print(f"- {calendar['summary']} (ID: {calendar['id']})")
    
    # Select a calendar ID
    calendar_id = input('Enter the ID of the calendar to add events to: ')
    
    # Example event to be added
    event = {
        'summary': 'Test Event',
        'location': 'Somewhere',
        'description': 'Testing the Google Calendar API',
        'start': {
            'dateTime': '2024-06-26T09:00:00',
            'timeZone': 'America/Los_Angeles',
        },
        'end': {
            'dateTime': '2024-06-26T10:00:00',
            'timeZone': 'America/Los_Angeles',
        },
        'reminders': {
            'useDefault': False,
            'overrides': [
                {'method': 'email', 'minutes': 24 * 60},
                {'method': 'popup', 'minutes': 10},
            ],
        },
    }
    
    # Insert event
    event = service.events().insert(calendarId=calendar_id, body=event).execute()
    print(f'Event created: {event.get("htmlLink")}')

if __name__ == '__main__':
    main()








# Get query
"
I have a meeting with Brooke at 5pm this Friday at the Starbucks on 114th and Broadway, can you add that to my calendar?
It's gonna be interview so I'll need to bring my resume.
"

# Run query into ChatGPT API using option-specific formating
# Ex. Add New Event
# Optional: Location, Description, Notification, Color 

"
For your response, input the following prompt information in the format
below: "YOUR_PROMPT_HERE"

Title: "insert title"
Date: 00/00/0000
Time: 00:00 AP/PM
Location: Online/Address
Description: "insert description or link"
Notification: X minutes
Color: "insert color"
"


# For Create Event Format it in a way like a dictionary

substring = starting from keyword "Title:"
string_to_dictionary(substring)
{Title: "insert",... etc.}
Google Calendar API createEvent(){}

# Database
Query_ID, Query_Type, Time, Information
Query_Type = {create, remove, edit, pull}


# Description
If the description includes a link to be shared with others, do so 
Else, just include the link


# Notification
Default of 10 minutes
Else, include notification in minutes.


# Color
If the user inputs a specific event type in they're prompt check with
the Calendar for associated color. Sama if they input a color and their
calendar has it set as an event type.
Else, default to Peacock (light blue).


# Future tweaks + Additional functionality: 

Recurrence functionality for event creation/updates (ex. every Monday, on weekdays, etc).

Add event selection for Remove functionality in case of duplicate titles.

Add pull functionality for users to check information regarding specific events such as the date and time of an event.
If a specific pull query has been answered before, spit out the existing record.

Add restorative functionality. Have users able to undo changes to specific events, a la command z.

For update event, have GPT API get the keyword from the user and match it with event titles in the records of the db.
Have all of the matching records and have the user select which is the correct event they want updated.